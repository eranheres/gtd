-- Import the TaskLine class
local task_line = require("gtd.taskline")
local utils = require("gtd.utils")

local function tstr(str)
  local year, month, day = str:match("(%d+)-(%d+)-(%d+)")
  return os.time({ year = year, month = month, day = day })
end

describe("TaskLine", function()
  describe("TaskLine", function()
    it("update fields", function()
      local task = task_line.from_string("- [x] (A) this is a task")
      assert.are.equal("x", task.status)
      assert.are.equal("A", task.priority)
      assert.are.equal("this is a task", task.text)

      task = task_line.update_fields(task, { status = " " })
      assert.are.equal(" ", task.status)
      assert.are.equal("A", task.priority)
      assert.are.equal("this is a task", task.text)

      -- local line = modify_line.update_task_line({ status = "x" }, "- [ ] this is a task")
      -- assert.are.equal("- [x] this is a task", line)
      -- assert.are.equal("this is a task", task.text)
    end)
  end)

  it("basic invalid string parses", function()
    local task = task_line.from_string("this is not a task")
    assert.is_false(task_line.is_valid(task))
    task = task_line.from_string("[ ] this is not a task")
    assert.is_false(task_line.is_valid(task))
    task = task_line.from_string(" - [ ] this is not a task")
    assert.is_false(task_line.is_valid(task))

    task = task_line.from_string("- [z] this is a task bla bla due:[2024-02-02]")
    assert.is_nil(task.due_date)
  end)

  it("test invalid scheduled task", function()
    local task = task_line.from_string("- [r] bla bla | schedule:[D]")
    -- vim.print(task, "\n")
    assert.is_true(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [ ] bla bla | schedule:[D]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [ ] bla bla | schedule:[D-1]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[R]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[W-3]")
    assert.is_true(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[W-3,8]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[W-7,3,2]")
    assert.is_true(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[M-1,12,38]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[M-7,3,2]")
    assert.is_true(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[Y-1/1,1/312]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[Y-1/1,1/312]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[Y-1/1,1]")
    assert.is_false(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] bla bla | schedule:[Y-7/1,12/31,1/1]")
    assert.is_true(task_line.is_schedule_valid(task))
    task = task_line.from_string("- [r] this is a scheduled task but without schedule")
    assert.is_nil(task.due_date)
  end)

  it("parses a string correctly with daily schedule", function()
    local input_str = "- [r] (A) this is a completed task | schedule:[D]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    assert.is_true(task_line.is_schedule_valid(task))
    assert.are.equal("r", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("D", task.schedule.period)
    assert.are.equal(0, #task.schedule.times)
  end)

  it("parses a string correctly with weekly schedule", function()
    local input_str = "- [r] (A) this is a completed task | schedule:[W-2,3]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    assert.is_true(task_line.is_schedule_valid(task))
    assert.are.equal("r", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("W", task.schedule.period)
    assert.are.has_same({ "2", "3" }, task.schedule.times)
  end)

  it("parses a string correctly with monthly schedule", function()
    local input_str = "- [r] (A) this is a completed task | schedule:[M-21,3]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    assert.is_true(task_line.is_schedule_valid(task))
    assert.are.equal("r", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("M", task.schedule.period)
    assert.are.has_same({ "21", "3" }, task.schedule.times)
  end)

  it("parses a string correctly with yearly schedule", function()
    local input_str = "- [r] (A) this is a completed task | schedule:[Y-12/2]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    assert.is_true(task_line.is_schedule_valid(task))
    assert.are.equal("r", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("Y", task.schedule.period)
    assert.are.has_same({ "12/2" }, task.schedule.times)
  end)

  it("basic valid string parses", function()
    local task = task_line.from_string("- [x] (A) this is a task")
    assert.are.equal("x", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a task", task.text)

    task = task_line.from_string("- [ ] (A) this is a task")
    assert.are.equal(" ", task.status)
    assert.are.equal("this is a task", task.text)

    task = task_line.from_string("- [ ] (A) this is a task | test")
    assert.are.equal(" ", task.status)
    assert.are.equal("this is a task", task.text)

    task = task_line.from_string("- [y] this is a task | test")
    assert.are.equal("y", task.status)
    assert.are.equal("this is a task", task.text)

    task = task_line.from_string("- [z] this is a task")
    assert.are.equal("z", task.status)
    assert.are.equal("this is a task", task.text)

    task = task_line.from_string("- [z] this is a task | bla bla due:[2024-02-02]")
    assert.are.equal("z", task.status)
    assert.are.equal("this is a task", task.text)
    assert.are.equal("2024-02-02", task.due_date)

    task = task_line.from_string("- [ ] (A) Test due task | created:[2024-07-07] due:[2024-07-07 Sun]")
    task_line.is_valid(task)
    assert.are.equal(" ", task.status)
    assert.are.equal("Test due task", task.text)
    assert.are.equal("2024-07-07", task.due_date)
  end)

  it("parses a string correctly with date", function()
    local input_str =
      "- [x] (A) this is a completed task | created:[2024-02-02] log:[[2024-02-02][2024-02-02-Tasks-Notes.md]]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    assert.are.equal("x", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("2024-02-02", task.created_date)
    assert.are.equal("2024-02-02][2024-02-02-Tasks-Notes.md", task.log)
  end)

  it("to string adding schedule", function()
    local task = task_line.from_string("- [r] bla bla | schedule:[Y-7/1,12/31,1/1]")
    assert.is_true(task_line.is_valid(task))
    task.task_id = "ABC"
    table.insert(task.schedule.times, "8/8")
    assert.are.equal("- [r] bla bla | #:[Y-7/1,12/31,1/1,8/8] id:[ABC]", task_line.to_string(task))

    task = task_line.from_string("- [r] bla bla | schedule:[D]")
    task.task_id = "ABC"
    assert.is_true(task_line.is_valid(task))
    assert.are.equal("- [r] bla bla | #:[D] id:[ABC]", task_line.to_string(task))
  end)

  it("parses a string correctly", function()
    local input_str =
      "- [x] (A) this is a completed task | due:[2024-02-02] @[Sagi] ~:[2024-02-01] log:[[2024-02-02][2024-02-02-Tasks-Notes.md]]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    assert.are.equal("x", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("2024-02-02", task.due_date)
    assert.are.equal("Sagi", task.assignee)
    assert.are.equal("2024-02-02][2024-02-02-Tasks-Notes.md", task.log)
  end)

  it("returns fields correctly", function()
    local task = task_line.from_string(
      "- [x] (A) this is a completed task | due:[2024-02-02] @[Sagi] ~:[2024-02-01] log:[[2024-02-02][2024-02-02-Tasks-Notes.md]]"
    )
    assert.is_true(task_line.is_valid(task))
    assert.are.equal("x", task.status)
    assert.are.equal("A", task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("2024-02-02", task.due_date)
    assert.are.equal("Sagi", task.assignee)
    assert.are.equal("2024-02-02][2024-02-02-Tasks-Notes.md", task.log)

    task = task_line.from_string(
      "- [x] this is a completed task | due:[2024-02-02] @[Sagi] ~:[2024-02-01] log:[[2024-02-02][2024-02-02-Tasks-Notes.md]]"
    )
    assert.is_true(task_line.is_valid(task))
    assert.are.equal("x", task.status)
    assert.is_nil(task.priority)
    assert.are.equal("this is a completed task", task.text)
    assert.are.equal("2024-02-02", task.due_date)
    assert.are.equal("Sagi", task.assignee)
    assert.are.equal("2024-02-02][2024-02-02-Tasks-Notes.md", task.log)
  end)

  it("parses invalid lines", function()
    local input_str =
      "- [x] (A) this is a completed task | due:[2024-02-02] @[Sagi] ~:[2024-02-01] note:[[2024-02-02][2024-02-02-Tasks-Notes.md]]"
    local task = task_line.from_string(input_str)
    assert.is_true(task_line.is_valid(task))
    task = task_line.from_string("- [ ] valid simple task")
    assert.is_true(task_line.is_valid(task))
    task = task_line.from_string("")
    assert.is_false(task_line.is_valid(task))
    task = task_line.from_string("just a line without a checkbox")
    assert.is_false(task_line.is_valid(task))
    task = task_line.from_string("[ ] invalid checkbox")
    assert.is_false(task_line.is_valid(task))
  end)

  it("Check repeated task next date daily", function()
    local task = task_line.from_string("- [r] (A) this is a completed task | schedule:[D]")
    local next = task_line.next_due_date(task, tstr("2024-02-02"))
    assert.are.equal("2024-02-03", next)
    next = task_line.next_due_date(task, tstr("2024-01-31"))
    assert.are.equal("2024-02-01", next)
    next = task_line.next_due_date(task, tstr("2024-12-31"))
    assert.are.equal("2025-01-01", next)
  end)

  it("Check repeated task next date weekly", function()
    local task = task_line.from_string("- [r] (A) this is a completed task | schedule:[W-2]")
    assert.is_true(task_line.is_schedule_valid(task))
    local next = task_line.next_due_date(task, tstr("2024-07-04"))
    assert.are.equal("2024-07-08", next)
    next = task_line.next_due_date(task, tstr("2024-07-01"))
    assert.are.equal("2024-07-08", next)

    task = task_line.from_string("- [r] (A) this is a completed task | schedule:[W-2,4]")
    assert.is_true(task_line.is_schedule_valid(task))
    next = task_line.next_due_date(task, tstr("2024-07-04"))
    assert.are.equal("2024-07-08", next)
    next = task_line.next_due_date(task, tstr("2024-07-01"))
    assert.are.equal("2024-07-03", next)
  end)

  it("Check repeated task next date monthly", function()
    local task = task_line.from_string("- [r] (A) this is a completed task | schedule:[M-15]")
    assert.is_true(task_line.is_schedule_valid(task))
    local next = task_line.next_due_date(task, tstr("2024-07-04"))
    assert.are.equal("2024-07-15", next)
    next = task_line.next_due_date(task, tstr("2024-07-16"))
    assert.are.equal("2024-08-15", next)
    next = task_line.next_due_date(task, tstr("2024-12-16"))
    assert.are.equal("2025-01-15", next)

    task = task_line.from_string("- [r] (A) this is a completed task | schedule:[M-15,10]")
    assert.is_true(task_line.is_schedule_valid(task))
    next = task_line.next_due_date(task, tstr("2024-07-04"))
    assert.are.equal("2024-07-10", next)
    next = task_line.next_due_date(task, tstr("2024-07-12"))
    assert.are.equal("2024-07-15", next)
    next = task_line.next_due_date(task, tstr("2024-07-20"))
    assert.are.equal("2024-08-10", next)
  end)

  it("Check repeated task next date yearly", function()
    local task = task_line.from_string("- [r] (A) this is a completed task | schedule:[Y-03/09]")
    assert.is_true(task_line.is_schedule_valid(task))
    local next = task_line.next_due_date(task, tstr("2024-02-09"))
    assert.are.equal("2024-03-09", next)
    next = task_line.next_due_date(task, tstr("2024-03-12"))
    assert.are.equal("2025-03-09", next)

    task = task_line.from_string("- [r] (A) this is a completed task | schedule:[Y-03/01,07/01]")
    assert.is_true(task_line.is_schedule_valid(task))
    next = task_line.next_due_date(task, tstr("2024-02-09"))
    assert.are.equal("2024-03-01", next)
    next = task_line.next_due_date(task, tstr("2024-03-12"))
    assert.are.equal("2024-07-01", next)
    next = task_line.next_due_date(task, tstr("2024-08-12"))
    assert.are.equal("2025-03-01", next)
  end)

  it("Check list inject", function()
    local lst = {"A", "B", "C", "D" }
    assert.are.has_same(utils.list_inject(lst, {"1", "2"}, 1), {"1", "2", "A", "B", "C", "D" })
    assert.are.has_same(utils.list_inject(lst, {"1", "2"}, 4), {"A", "B", "C", "1", "2", "D" })
    assert.are.has_same(utils.list_inject(lst, {"1", "2"}, 5), {"A", "B", "C", "D", "1", "2" })
  end)
end)
